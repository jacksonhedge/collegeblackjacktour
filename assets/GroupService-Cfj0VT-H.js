const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/EmailService-CRBjdB80.js","assets/main-CIF9t6XU.js","assets/main-D0prcIsd.css"])))=>i.map(i=>d[i]);
import{e as h,f as l,q as w,W as N,P as u,g as f,Y as b,i as m,Z as D,k as v,h as E,l as C,_ as U}from"./main-CIF9t6XU.js";class I{constructor(){this.groupsCollection="groups",this.usersCollection="users"}async searchUsers(e){try{if(!e||e.length<2)return[];const o=h(l,this.usersCollection),r=e.toLowerCase(),t=w(o,N(u("username",">=",r),u("username","<=",r+"ï£¿"),u("email",">=",r),u("email","<=",r+"ï£¿"),u("phone",">=",r),u("phone","<=",r+"ï£¿"))),c=await f(t),a=[];return c.forEach(n=>{const s=n.data();a.push({uid:n.id,displayName:s.firstName&&s.lastName?`${s.firstName} ${s.lastName}`:s.username||n.id,username:s.username,email:s.email,phone:s.phone,photoURL:s.profileImage})}),a}catch(o){throw console.error("Error searching users:",o),o}}async getUserData(e){try{console.log("Fetching user data for:",e);const o=await b(m(l,this.usersCollection,e));if(o.exists()){const a=o.data();console.log("Found user data:",a);let n=a.profileImage;if(!n&&!a.photoURL){const i=e.split("").reduce((d,p)=>d+p.charCodeAt(0),0)%30+1;n=`/images/profile_${i}.${i===1||i===4||i===16||i===30?"jpeg":"png"}`}return{uid:e,displayName:a.firstName&&a.lastName?`${a.firstName} ${a.lastName}`:a.username||e,photoURL:n||a.photoURL,profileImage:n||a.profileImage,firstName:a.firstName,lastName:a.lastName,email:a.email,username:a.username}}console.log("No user data found for:",e);const t=e.split("").reduce((a,n)=>a+n.charCodeAt(0),0)%30+1,c=`/images/profile_${t}.${t===1||t===4||t===16||t===30?"jpeg":"png"}`;return{uid:e,displayName:"Unknown User",photoURL:c,profileImage:c,firstName:"",lastName:""}}catch(o){throw console.error("Error fetching user data:",o),o}}async getUserGroups(e){try{if(console.log("Fetching groups for user:",e),!e)throw new Error("User ID is required");const o=h(l,this.groupsCollection),r=w(o,u("memberIds","array-contains",e)),t=w(o,u("ownerId","==",e)),[c,a]=await Promise.all([f(r),f(t)]),n=new Set;c.forEach(i=>{console.log("Found member group:",i.id,i.data()),n.add({id:i.id,...i.data()})}),a.forEach(i=>{console.log("Found owner group:",i.id,i.data()),n.add({id:i.id,...i.data()})});const s=Array.from(n);return console.log("Total groups found:",s.length,s),s}catch(o){throw console.error("Error fetching user groups:",o),o}}async getGroup(e){try{if(console.log("Fetching group:",e),!e)throw new Error("Group ID is required");const o=m(l,this.groupsCollection,e),r=await b(o);if(console.log("Group doc exists:",r.exists()),r.exists()){const t=r.data();console.log("Raw group data:",t),console.log("Fetching owner data for:",t.ownerId);const c=await this.getUserData(t.ownerId);console.log("Owner data:",c),console.log("Fetching member data for:",t.memberIds);const a=(t.memberIds||[]).map(i=>this.getUserData(i)),n=await Promise.all(a);console.log("Member data:",n);const s={id:r.id,...t,owner:c,members:n.filter(i=>i!==null)};return console.log("Full group data:",s),s}else throw console.log("Group not found with ID:",e),new Error("Group not found")}catch(o){throw console.error("Error fetching group:",o),o}}async createGroup(e,o){try{if(console.log("Creating group with data:",{groupData:e,creator:o}),!e||!o)throw new Error("Group data and creator information are required");if(!e.name)throw new Error("Group name is required");if(!o.id&&!o.uid)throw new Error("Creator must have an id or uid property");const r=o.id||o.uid,t=D(),c=h(l,this.groupsCollection),a=await this.getUserData(r);console.log("Creator data:",a);const n={id:t,name:e.name,emoji:e.emoji||"ðŸ‘¥",description:e.description||"",ownerId:r,owner:a,members:[a],memberIds:[r],pendingMembers:e.pendingMembers||[],dateCreated:new Date().toISOString(),isHidden:!1,visibility:e.visibility||"private",inviteLink:`https://onbankroll.com/group/${t}`,status:"active"};console.log("Creating new group:",n);const s=await v(c,n);console.log("Group created with ID:",s.id);const i={...n,id:s.id};return await E(m(c,s.id),{id:s.id}),console.log("Group updated with ID"),i}catch(r){throw console.error("Error creating group:",r),r}}async updateGroup(e,o,r){var t;try{const c=await this.getGroup(e);if(c.ownerId!==r&&!((t=c.coOwners)!=null&&t.includes(r)))throw new Error("User does not have permission to update this group");const a=m(l,this.groupsCollection,e);return await E(a,o),await this.getGroup(e)}catch(c){throw console.error("Error updating group:",c),c}}async deleteGroup(e,o){try{if((await this.getGroup(e)).ownerId!==o)throw new Error("Only the group owner can delete the group");const t=m(l,this.groupsCollection,e);await C(t)}catch(r){throw console.error("Error deleting group:",r),r}}async leaveGroup(e,o){var r;try{const t=await this.getGroup(e);if(t.ownerId===o)throw new Error("Group owner cannot leave the group");const c=t.members.filter(s=>s.uid!==o),a=t.memberIds.filter(s=>s!==o),n=((r=t.coOwners)==null?void 0:r.filter(s=>s!==o))||[];await this.updateGroup(e,{members:c,memberIds:a,coOwners:n},t.ownerId)}catch(t){throw console.error("Error leaving group:",t),t}}async addMembers(e,o){try{const r=await this.getGroup(e),t=o.map(s=>this.getUserData(s.id||s.uid)),c=await Promise.all(t),a=[...r.members],n=[...r.memberIds];return c.forEach(s=>{s&&!n.includes(s.uid)&&(a.push(s),n.push(s.uid))}),await this.updateGroup(e,{members:a,memberIds:n},r.ownerId),await this.getGroup(e)}catch(r){throw console.error("Error adding members:",r),r}}async isUserInGroup(e,o){try{if(!e||!o)throw new Error("User ID and Group ID are required");const r=await this.getGroup(o);return r.memberIds.includes(e)||r.ownerId===e}catch(r){throw console.error("Error checking user group membership:",r),r}}async inviteUsers(e,o,r){try{if(console.log("Inviting users to group:",e,o),!e||!o||o.length===0)throw new Error("Group ID and invite data are required");if(!r)throw new Error("Current user ID is required");const t=await this.getGroup(e),c=await this.getUserData(r),a=h(l,"groupInvitations"),n=o.map(async i=>{var p;const d={groupId:e,groupName:t.name,inviterId:r,inviterName:c.displayName,invitedUserId:i.uid,invitedUserEmail:i.email,invitedUserName:i.displayName,status:"pending",createdAt:new Date().toISOString(),expiresAt:new Date(Date.now()+6048e5).toISOString()};if(await v(a,d),i.email)try{const g=(await U(async()=>{const{default:G}=await import("./EmailService-CRBjdB80.js");return{default:G}},__vite__mapDeps([0,1,2]))).default,_=t.totalBalance||0,S=((p=t.memberIds)==null?void 0:p.length)||1,y=await g.sendBulkGroupInvites(e,t.name,[i.email],t.emoji||"ðŸ‘¥",{displayName:c.displayName,email:c.email||r});y.success||console.error("Failed to send invite email:",y.failed)}catch(g){console.error("Error sending invite email:",g)}return d}),s=await Promise.all(n);return console.log("Created invitations:",s),s}catch(t){throw console.error("Error inviting users:",t),t}}}const q=new I;export{q as g};
