var p={};const m=p.REACT_APP_POLYGON_API_KEY||"YOUR_API_KEY_HERE",d="https://api.polygon.io",i=new Map,n=3e4;let h=0;const u=1e3;class g{constructor(){this.apiKey=m,this.baseUrl=d}async rateLimitedFetch(a){const c=Date.now()-h;c<u&&await new Promise(e=>setTimeout(e,u-c)),h=Date.now();const t=await fetch(a);if(!t.ok)throw new Error(`Polygon API error: ${t.status} ${t.statusText}`);return t.json()}async getTickerPrice(a){const s=`price_${a}`,c=i.get(s);if(c&&Date.now()-c.timestamp<n)return c.data;try{const t=`${this.baseUrl}/v2/aggs/ticker/${a}/prev?adjusted=true&apiKey=${this.apiKey}`,e=await this.rateLimitedFetch(t);if(e.status==="OK"&&e.results&&e.results.length>0){const r=e.results[0],o={symbol:a,price:r.c,change:r.c-r.o,changePercent:(r.c-r.o)/r.o*100,volume:r.v,timestamp:r.t};return i.set(s,{data:o,timestamp:Date.now()}),o}throw new Error("No data available for ticker")}catch(t){throw console.error(`Error fetching price for ${a}:`,t),t}}async getMultipleTickerPrices(a){try{const s=a.map(t=>this.getTickerPrice(t).catch(e=>({symbol:t,error:e.message,price:0,change:0,changePercent:0})));return await Promise.all(s)}catch(s){throw console.error("Error fetching multiple ticker prices:",s),s}}async getMarketStatus(){const a="market_status",s=i.get(a);if(s&&Date.now()-s.timestamp<n*2)return s.data;try{const c=`${this.baseUrl}/v1/marketstatus/now?apiKey=${this.apiKey}`,t=await this.rateLimitedFetch(c),e={market:t.market,serverTime:t.serverTime,isOpen:t.market==="open",afterHours:t.afterHours==="open",exchanges:t.exchanges};return i.set(a,{data:e,timestamp:Date.now()}),e}catch(c){return console.error("Error fetching market status:",c),{isOpen:!1,market:"closed"}}}async getTickerDetails(a){const s=`details_${a}`,c=i.get(s);if(c&&Date.now()-c.timestamp<n*10)return c.data;try{const t=`${this.baseUrl}/v3/reference/tickers/${a}?apiKey=${this.apiKey}`,e=await this.rateLimitedFetch(t);if(e.status==="OK"&&e.results){const r={symbol:e.results.ticker,name:e.results.name,market:e.results.market,locale:e.results.locale,type:e.results.type,active:e.results.active,currencyName:e.results.currency_name,marketCap:e.results.market_cap,description:e.results.description};return i.set(s,{data:r,timestamp:Date.now()}),r}throw new Error("No details available for ticker")}catch(t){throw console.error(`Error fetching details for ${a}:`,t),t}}async getCryptoPrice(a,s="USD"){const c=`crypto_${a}_${s}`,t=i.get(c);if(t&&Date.now()-t.timestamp<n)return t.data;try{const e=`${this.baseUrl}/v2/aggs/ticker/X:${a}${s}/prev?adjusted=true&apiKey=${this.apiKey}`,r=await this.rateLimitedFetch(e);if(r.status==="OK"&&r.results&&r.results.length>0){const o=r.results[0],l={symbol:a,pair:`${a}/${s}`,price:o.c,change:o.c-o.o,changePercent:(o.c-o.o)/o.o*100,volume:o.v,timestamp:o.t};return i.set(c,{data:l,timestamp:Date.now()}),l}throw new Error("No data available for crypto pair")}catch(e){throw console.error(`Error fetching crypto price for ${a}/${s}:`,e),e}}async getIndexData(a){const c={SPX:"I:SPX",NDX:"I:NDX",DJI:"I:DJI",VIX:"I:VIX"}[a]||a;try{const t=`${this.baseUrl}/v2/aggs/ticker/${c}/prev?adjusted=true&apiKey=${this.apiKey}`,e=await this.rateLimitedFetch(t);if(e.status==="OK"&&e.results&&e.results.length>0){const r=e.results[0];return{symbol:a,price:r.c,change:r.c-r.o,changePercent:(r.c-r.o)/r.o*100,high:r.h,low:r.l,volume:r.v,timestamp:r.t}}throw new Error("No data available for index")}catch(t){throw console.error(`Error fetching index data for ${a}:`,t),t}}clearCache(){i.clear()}}const y=new g;export{y as p};
