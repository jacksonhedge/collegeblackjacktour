import{$ as d,at as b}from"./main-Bt21LLck.js";class ${constructor(){this.baseUrl="https://bankroll.live"}async sendBankrollInvite({to:r,inviterName:e,inviterEmail:t,personalMessage:i,method:o="email"}){try{if(o==="sms")return await this.sendSMSInvite({to:r,type:"bankroll",inviterName:e,personalMessage:i,inviteLink:`${this.baseUrl}/signup?referrer=${encodeURIComponent(t)}`});const{data:s,error:c}=await d.functions.invoke("send-email",{body:{to:r,type:"welcome",data:{userName:e,inviterName:e,inviterEmail:t,personalMessage:i,inviteLink:`${this.baseUrl}/signup?referrer=${encodeURIComponent(t)}`,unsubscribeUrl:`${this.baseUrl}/unsubscribe`}}});if(c)throw c;return await this.trackInvite("bankroll",r,"sent"),s}catch(s){throw console.error("Error sending Bankroll invite:",s),s}}async sendGroupInvite({to:r,inviterName:e,inviterEmail:t,groupId:i,groupName:o,groupEmoji:s,groupBalance:c,memberCount:n,members:u,winRate:a,personalMessage:h,method:g="email"}){var l;try{const p=await this.generateInviteCode(i),m=`${this.baseUrl}/join/group/${i}`;if(g==="sms")return await this.sendSMSInvite({to:r,type:"group",inviterName:e,groupName:o,personalMessage:h,inviteLink:m});const w=await this.checkIfNewUser(r),{data:v,error:f}=await d.functions.invoke("send-email",{body:{to:r,type:"group-invite",data:{inviterName:e,inviterEmail:t,groupId:i,groupName:o,groupEmoji:s,groupBalance:c||0,memberCount:n||1,members:u,winRate:a||0,personalMessage:h,inviteLink:m,isNewUser:w,unsubscribeUrl:`${this.baseUrl}/unsubscribe`}}});if(f)throw f;return await this.storeInvite({type:"group",sender_id:(l=b.currentUser)==null?void 0:l.uid,sender_name:e,sender_email:t,recipient:r,group_id:i,invite_code:p,message:h,status:"pending"}),await this.trackInvite("group",r,"sent"),v}catch(p){throw console.error("Error sending group invite:",p),p}}async sendFriendRequest({to:r,senderName:e,senderEmail:t,senderUsername:i,senderAvatar:o,groupCount:s,friendCount:c,winStreak:n,mutualFriends:u,personalMessage:a,method:h="email"}){var g;try{const l=this.generateRequestId(),p=`${this.baseUrl}/friends/requests?action=accept&id=${l}`,m=`${this.baseUrl}/friends/requests?action=decline&id=${l}`;if(h==="sms")return await this.sendSMSInvite({to:r,type:"friend",senderName:e,personalMessage:a,acceptUrl:p});const w=await this.checkIfNewUser(r),{data:v,error:f}=await d.functions.invoke("send-email",{body:{to:r,type:"custom",subject:`${e} wants to be your friend on Bankroll`,data:{message:a||`${e} sent you a friend request on Bankroll!`,senderName:e,senderEmail:t,senderUsername:i,senderAvatar:o,groupCount:s||0,friendCount:c||0,winStreak:n||0,mutualFriends:u,personalMessage:a,acceptUrl:p,declineUrl:m,settingsUrl:`${this.baseUrl}/settings/notifications`,unsubscribeUrl:`${this.baseUrl}/unsubscribe`,isNewUser:w}}});if(f)throw f;return await this.storeFriendRequest({request_id:l,sender_id:(g=b.currentUser)==null?void 0:g.uid,sender_name:e,sender_email:t,recipient:r,message:a,status:"pending"}),await this.trackInvite("friend",r,"sent"),v}catch(l){throw console.error("Error sending friend request:",l),l}}async sendBulkInvites({recipients:r,type:e,inviteData:t,method:i="email"}){const o=[],s=[],c=[];if(r.forEach(n=>{n.includes("@")?s.push(n):c.push(n)}),i==="email"&&s.length>0)try{const n=this.prepareBulkTemplateData(e,t);console.log("Sending bulk email invites:",{recipients:s,type:e==="group"?"group-invite":e,templateData:n});const{data:u,error:a}=await d.functions.invoke("send-email",{body:{to:s,type:e==="group"?"group-invite":e,data:n}});if(console.log("Email send response:",{data:u,error:a}),a)throw a;s.forEach(h=>{o.push({recipient:h,success:!0,method:"email"})})}catch(n){s.forEach(u=>{o.push({recipient:u,success:!1,error:n.message})})}for(const n of c)try{await this.sendSMSInvite({to:n,type:e,...t}),o.push({recipient:n,success:!0,method:"sms"})}catch(u){o.push({recipient:n,success:!1,error:u.message})}return o}async sendSMSInvite(r){try{let e="";switch(r.type){case"bankroll":e=`${r.inviterName} invited you to join Bankroll! Get instant withdrawals from sportsbooks and earn on your balance. Sign up and get $25: ${r.inviteLink}`;break;case"group":e=`${r.inviterName} invited you to join ${r.groupName} on Bankroll! ${r.personalMessage?`"${r.personalMessage}" `:""}Join here: ${r.inviteLink}`;break;case"friend":e=`${r.senderName} sent you a friend request on Bankroll! ${r.personalMessage?`"${r.personalMessage}" `:""}Accept: ${r.acceptUrl}`;break;case"referral":e=`${r.inviterName} invited you to join Bankroll! Sign up with referral code ${r.referralCode} and we both get $10! ${r.personalMessage?`"${r.personalMessage}" `:""}Join here: ${this.baseUrl}/signup?ref=${r.referralCode}`;break}const t=r.to.replace(/\D/g,"");return window.location.href=`sms:${t}?body=${encodeURIComponent(e)}`,{success:!0}}catch(e){throw console.error("Error sending SMS invite:",e),e}}async generateInviteCode(r){const e=Math.random().toString(36).substring(2,8).toUpperCase();return`${r}-${e}`}generateRequestId(){return`fr-${Date.now()}-${Math.random().toString(36).substring(2,8)}`}getTemplateName(r){return{bankroll:"joinBankroll",group:"groupInvite",friend:"friendRequest",referral:"referralInvite"}[r]||"genericInvite"}prepareBulkTemplateData(r,e){const t={...e};return delete t.to,r==="referral"&&e.referralCode&&(t.referralLink=`${this.baseUrl}/signup?ref=${e.referralCode}`,t.reward="$10"),t}async checkIfNewUser(r){try{const{data:e,error:t}=await d.from("users").select("id").eq("email",r).single();return!e}catch{return!0}}async storeInvite(r){try{const{error:e}=await d.from("invitations").insert({...r,created_at:new Date().toISOString(),expires_at:new Date(Date.now()+6048e5).toISOString()});if(e)throw e}catch(e){console.error("Error storing invite:",e)}}async storeFriendRequest(r){try{const{error:e}=await d.from("friend_requests").insert({...r,created_at:new Date().toISOString()});if(e)throw e}catch(e){console.error("Error storing friend request:",e)}}async trackInvite(r,e,t){var i;try{await d.from("invitation_metrics").insert({type:r,recipient:e,status:t,sender_id:(i=b.currentUser)==null?void 0:i.uid,timestamp:new Date().toISOString()})}catch(o){console.error("Error tracking invite:",o)}}async resendInvite(r){try{const{data:e,error:t}=await d.from("invitations").select("*").eq("id",r).single();if(t||!e)throw new Error("Invite not found");switch(e.type){case"group":return await this.sendGroupInvite({to:e.recipient,inviterName:e.sender_name,inviterEmail:e.sender_email,groupId:e.group_id,groupName:e.group_name,personalMessage:e.message});case"friend":return await this.sendFriendRequest({to:e.recipient,senderName:e.sender_name,senderEmail:e.sender_email,personalMessage:e.message});default:throw new Error("Unknown invite type")}}catch(e){throw console.error("Error resending invite:",e),e}}}const I=new $;export{I as default};
